<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc3961 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3961.xml">
<!ENTITY rfc4120 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
<!ENTITY rfc6113 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6113.xml">
<!ENTITY rfc4120 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
<!ENTITY rfc6560 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6560.xml">
<!ENTITY spake SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-irtf-cfrg-spake2-01.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc autobreaks="yes"?>
<?rfc docmapping="yes"?>

<rfc category="std" docName="draft-mccallum-kitten-krb-spake-preauth-00"
      ipr="trust200902">
  <front>
    <title abbrev="SPAKE Pre-Authentication">SPAKE Pre-Authentication</title>

    <author fullname="Nathaniel McCallum" initials="N." surname="McCallum">
      <organization>Red Hat, Inc.</organization>
      <address><email>npmccallum@redhat.com</email></address>
    </author>

    <author fullname="Simo Sorce" initials="S." surname="Sorce">
      <organization>Red Hat, Inc.</organization>
      <address><email>ssorce@redhat.com</email></address>
    </author>

    <author fullname="Greg Hudson" initials="G." surname="Hudson">
      <organization>MIT</organization>
      <address><email>ghudson@mit.edu</email></address>
    </author>

    <date month="April" year="2015" />

    <area>Security</area>
    
    <workgroup>Internet Engineering Task Force</workgroup>

    <abstract>
      <t>This document defines a new pre-authentication mechanism for the Kerberos
      protocol that uses a password authenticated key exchange. This document has
      three goals. First, increase the security of Kerberos pre-authentication
      exchanges by making offline brute-force attacks impossible.
      Second, enable the use of secure second factor authentication without relying
      on FAST. This is achived using the existing trust relationship established
      by the shared first factor. Third, make Kerberos pre-authentication more
      resilient against time synchronization errors by removing the need to transfer
      an encrypted timestamp from the client.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The most widely deployed Kerberos pre-authentication method, <xref
      target="RFC4120"/> section 5.2.7.2, encrypts a timestamp in the client
      principal's long-term secret. When a client uses this method, a passive
      attacker can perform an offline brute-force attack against the
      transferred ciphertext. When the client principal's long-term key is
      based on a password, especially a weak password, offline dictionary
      attacks can successfully recover the key.</t>

      <section title="Properties of PAKE">
        <t>Password authenticated key exchange (PAKE) algorithms provide
        several properties which are useful to overcome this problem and make
        them ideal for use as a Kerberos pre-authentication mechanism.
        <list style="numbers">
          <t>Each side of the exchange contributes entropy.</t>
          <t>Passive attackers cannot determine the shared key.</t>
          <t>Active attackers cannot perform a man-in-the-middle attack.</t>
          <t>Either side can store a password or password equivalent.</t>
        </list></t>

        <t>These properties of PAKE allow us to establish high-entropy
        encryption keys resistant to offline brute force attack, even when
        the passwords used are weak (low-entropy).</t>
      </section>

      <section title="Which PAKE?">
        <t>Diffie-Hellman Encrypted Key Exchange (DH-EKE) is the earliest
        widely deployed PAKE. It works by encrypting the public keys of a
        Diffie-Hellman key exchange with a shared secret. However, it
        requires both that unauthenticated encryption be used and that the
        public keys be indistinguishable from random data. This requirement
        makes it impossible to use this form of PAKE with elliptic curve
        cryptography. For these reasons, DH-EKE is not a good fit.</t>

        <t>Password authenticated key exchange by juggling (JPAKE) permits
        the use of elliptic curve cryptography. However, it has drawbacks.
        First, the additional computation required for the algorithm makes
        it resource intensive for servers under load. Second, it requires an
        additional network round-trip, increasing latency and load on the
        network.</t>

        <t><xref target="I-D.irtf-cfrg-spake2">SPAKE</xref> is a variant of
        the technique used by DH-EKE which ensures that all public key
        encryption and decryption operations result in a member of the
        underlying group. This property allows SPAKE to be used with elliptic
        curve cryptography, permitting the use of markedly smaller key sizes
        with equivalent security to a finite-field Diffie-Hellman key
        exchange. Additionally, SPAKE can complete the key exchange in just a
        single round-trip. These properties make SPAKE an ideal PAKE to use
        for Kerberos pre-authentication.</t>
      </section>

      <section title="PAKE and Two-Factor Authentication">
        <t>Using PAKE in a pre-authentication mechanism also has another
        benefit when coupled with two-factor authentication (2FA). 2FA methods
        often require the secure transfer of plaintext material to the KDC for
        verification. This includes one-time passwords, challenge/response
        signatures and biometric data. Attempting to encrypt this data using
        the long-term secret results in packets that are vulnerable to offline
        brute-force attack if either authenticated encryption is used or if
        the plaintext is distinguishable from random data. This is a problem
        that PAKE solves for first factor authentication. So a similar
        technique can be used with PAKE to encrypt second-factor data.</t>

        <t>In OTP pre-authentication <xref target="RFC6560"/>, this problem
        has been mitigated by FAST <xref target="RFC6113"/>, which uses a
        secondary trust relationship to create a secure encryption channel
        within which pre-authentication data can be sent. However, the
        requirement for a secondary trust relationship has proven to be
        cumbersome to deploy and often introduces third parties into the trust
        chain (such as certification authorities). These requirements lead to
        a scenario where FAST cannot be enabled by default without sufficient
        configuration. However, by deriving existing key data using the
        entropy from the PAKE, the resulting encryption key can be used to
        securely encrypt 2FA plaintext data without the need for a secondary
        trust relationship. Further, if the first and second factor verifiers
        are sent at the same time and the KDC is careful to prevent timing
        attacks then an online brute-force attacker cannot attack each factor
        separately.</t>

        <t>For these reasons, this draft departs from the advice given in
        Section 1 of <xref target="RFC6113">RFC 6113</xref> which states that
        "Mechanism designers should design FAST factors, instead of new
        pre-authentication mechanisms outside of FAST." However, this
        pre-authentication mechanism does not intend to replace FAST, and may
        be used with it to further conceal the metadata of the Kerberos
        messages.</t>
      </section>

      <section title="SPAKE Overview">
        <t>The <xref target="I-D.irtf-cfrg-spake2">SPAKE</xref> algorithm can
        be broadly described in a series of four steps:
        <list style="numbers">
          <t>Calculation and exchange of the public key</t>
          <t>Calculation of the shared secret (K)</t>
          <t>Derivation of an encryption key (K')</t>
          <t>Verification of the derived encryption key (K')</t>
        </list></t>

        <t>Higher level protocols must define their own verification step. In
        the case of this mechanism, verification happens implicitly by a
        successful decryption of the 2FA data.</t>

        <t>This mechanism also provides its own method of deriving encryption
        keys from the calculated shared secret K, for several reasons: to fit
        within the framework of <xref target="RFC3961"/>, to ensure
        negotiation integrity using a transcript hash, to derive different
        keys for each use, and to bind the KDC-REQ-BODY to the
        pre-authentication exchange.</t>
      </section>
    </section>

    <section title="Document Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119">
      RFC 2119</xref>.</t>
    </section>

    <section title="Prerequisites">
      <section title="PA-ETYPE-INFO2">
        <t>This mechanism requires the initial KDC pre-authentication state to
        contain a singular reply key. Therefore, a KDC which offers SPAKE
        pre-authentication as a stand-alone mechanism MUST supply a
        PA-ETYPE-INFO2 value containing a single ETYPE-INFO2-ENTRY, as
        described in <xref target="RFC6113"/> section 2.1.</t>
      </section>

      <section title="Cookie Support">
        <t>KDCs which implement SPAKE pre-authentication MUST have some secure
        mechanism for retaining state between AS-REQs. For stateless KDC
        implementations, this method will most commonly be an encrypted
        PA-FX-COOKIE as defined in <xref target="RFC6113"/> section 5.2. Clients
        which implement SPAKE pre-authentication MUST support PA-FX-COOKIE.</t>
      </section>

      <section title="More Pre-Authentication Data Required">
        <t>Both KDCs and clients which implement SPAKE pre-authentication MUST
        support the use of KDC_ERR_MORE_PREAUTH_DATA_REQUIRED as defined in
        <xref target="RFC6113"/> section 5.2.</t>
      </section>

      <section title="Group Support">
        <t>Both KDCs and clients MUST implement one or more groups for which the
        discrete logarithm problem is hard, each with an corresponding object
        identifer. Group object identifiers MUST refer to one of the following:
        <list style="symbols">
          <t>One of the eight elliptic curves specified in <xref target="SEC2"/>
          section 2, using the corresponding object identifier from appendix
          A.2.1.</t>
          <t>A group with an unambiguous specification for representing group
          elements as octet strings, and an unambiguous specification for
          converting an octet string of a specific length into an integer for
          use as a scalar multiplier.</t>
        </list></t>
      </section>
    </section>

    <section title="SPAKE Pre-Authentication Message Protocol">
      <t>The SPAKE pre-authentication mechanism uses the reply key, and
      provides the Client Authentication and Strengthening Reply Key
      facilities described in <xref target="RFC6113"/> section 3. When the
      mechanism completes successfully, the client will have proved knowledge
      of the original reply key and possibly a second factor, and the reply
      key will be strengthened to a more uniform distribution based on the
      PAKE exchange. This mechanism also ensures the integrity of the
      KDC-REQ-BODY contents. This mechanism can be used in an authentication
      set (<xref target="RFC6113"/> section 5.3); no pa-hint value is required
      or defined.</t>

      <t>This section will describe the flow of messages when performing SPAKE
      pre-authentication. We will begin by explaining the most verbose version
      of the protocol which all implementations MUST support. Then we will
      describe several optional optimizations to reduce round-trips.</t>

      <t>All messages will use the following pre-authentication type:
      <list style="hanging">
        <t hangText="PA-SPAKE">TBD</t>
      </list></t>

      <section title="First Pass">
        <t>The SPAKE pre-authentication exchange begins when the client sends
        an initial authentication service request (AS-REQ) without
        pre-authentication data. Upon receipt of this AS-REQ, a KDC which
        requires pre-authentication and supports SPAKE SHOULD reply with
        a KDC_ERR_PREAUTH_REQUIRED error, with METHOD-DATA containing a PA-DATA
        element of padata-type PA-SPAKE and an empty padata-value. This
        indicates to the client that the KDC supports SPAKE
        pre-authentication.</t>
      </section>

      <section title="Second Pass">
        <t>Once the client knows that the KDC supports SPAKE pre-authentication
        and the client desires to use it, the client will generate a new AS-REQ
        which includes a PA-DATA element of padata-type PA-SPAKE, whose
        padata-value contains a DER-encoded SPAKESupport message. This message
        indicates to the KDC which groups the client prefers for the SPAKE
        operation. The groups sequence is ordered from the most preferred group
        to the least preferred group.</t>

        <figure>
          <artwork><![CDATA[
SPAKESupport ::= SEQUENCE {
    groups      [0] SEQUENCE (SIZE(1..MAX)) OF OBJECT IDENTIFIER,
    ...
}
]]></artwork>
        </figure>

        <t>The client and KDC initialize a transcript checksum (<xref
        target="tcksum"/>) and update it with the encoded SPAKESupport
        message.</t>

        <t>Upon receipt of the SPAKESupport message, the KDC will select a
        group. The KDC SHOULD choose a group from the groups provided by the
        SPAKESupport message. However, if the SPAKESupport message does not
        contain any group that is supported by the KDC, the KDC MAY select
        another group in hopes that the client might support it.</t>

        <t>Once the KDC has selected a group, the KDC will reply to the client
        with a KDC_ERR_MORE_PREAUTH_DATA_REQUIRED error containing a PA-DATA
        element of type PA-SPAKE, whose padata-value contains a DER-encoded
        SPAKEChallenge message.  The client and KDC update the transcript
        checksum with the encoded message.</t>

        <figure>
          <artwork><![CDATA[
SPAKEChallenge ::= SEQUENCE {
    group       [0] OBJECT IDENTIFIER,
    pubkey      [1] OCTET STRING,
    factors     [2] SEQUENCE (SIZE(1..MAX)) OF SPAKESecondFactor,
    ...
}
]]></artwork>
        </figure>

        <t>The group field indicates the KDC-selected group used for all SPAKE
        calculations.</t>

        <t>The pubkey field indicates the KDC's public key generated using the M
        constant in the SPAKE algorithm, with inputs and conversions as
        specified in <xref target="spakeparams"/>.</t>

        <t>The factors field contains an unordered list of second factors which
        can be used to complete the authentication. Each second factor is
        represented by a SPAKESecondFactor.</t>

        <figure>
          <artwork><![CDATA[
SPAKESecondFactor ::= SEQUENCE {
    type        [0] Int32,
    data        [1] OCTET STRING OPTIONAL
}
]]></artwork>
        </figure>

        <t>The type field is a unique integer which identifies the second factor
        type. The factors field of SPAKEChallenge MUST NOT contain more than one
        SPAKESecondFactor with the same type value.</t>

        <t>The data field contains optional challenge data. The contents in this
        field will depend upon the second factor type chosen.</t>
      </section>

      <section title="Third Pass">
        <t>Upon receipt of the SPAKEChallenge message, the client will
        complete its part of of the SPAKE process, resulting in the shared
        secret K.</t>

        <t>Next, the client chooses one of the second factor types listed in the
        challenge field of the SPAKEChallenge message and gathers whatever data
        is required for this second factor type; possibly using the challenge
        data for this second factor type. Finally, the client sends an AS-REQ
        containing a PA-DATA element of type PA-SPAKE, whose padata-value
        contains a DER-encoded SPAKEResponse message.</t>

        <figure>
          <artwork><![CDATA[
SPAKEResponse ::= SEQUENCE {
    pubkey      [0] OCTET STRING,
    factor      [1] EncryptedData, -- SPAKESecondFactor
    ...
}
]]></artwork>
        </figure>

        <t>The pubkey field indicates the client's public key generated using
        the N constant in the SPAKE algorithm, with inputs and conversions as
        specified in <xref target="spakeparams"/>.  The client and KDC update
        the transcript checksum with the pubkey value, and use the resulting
        checksum for all encryption key derivations.</t>

        <t>The factor field indicates the client's chosen second factor data.
        The key for this field is K'[1] as specified in <xref
        target="keyderiv"/>. The key usage number for the encryption is
        KEY_USAGE_SPAKE_FACTOR. The plain text inside the EncryptedData is an
        encoding of SPAKESecondFactor. Once decoded, the SPAKESecondFactor
        contains the type of the second factor and any optional data used. The
        contents of the data field will depend on the second factor type
        chosen. The client MUST NOT send a response containing a second factor
        type which was not listed in the factors field of the SPAKEChallenge
        message.</t>

        <t>When the KDC receives the SPAKEResponse message from the client, it
        will use the pubkey to compute the SPAKE result, derive K'[1], and
        decrypt the factors field. If decryption is successful, the first
        factor is successfully validated. The KDC then validates the second
        factor. If either factor fails to validate, the KDC responds with an
        appropriate KRB-ERROR message.</t>

        <t>If validation of the second factor requires further round-trips, the
        KDC MUST reply to the client with KDC_ERR_MORE_PREAUTH_DATA_REQUIRED
        containing a PA-DATA element of type PA-SPAKE, whose padata-value
        contains a DER-encoded EncryptedData message. The key for this message
        is K'[2] as specified in <xref target="keyderiv"/>, and the key usage
        number is KEY_USAGE_SPAKE_FACTOR. The plain text of this message
        contains a DER-encoded SPAKESecondFactor message. As before, the type
        field of this message will contain the second factor type, and the
        data field will optionally contain second factor type specific
        data.</t>

        <figure>
          <artwork><![CDATA[
KEY_USAGE_SPAKE_FACTOR                  TBD
]]></artwork>
        </figure>
      </section>

      <section title="Subsequent Passes">
        <t>Any number of EncryptedData message roundtrips may occur. The contents
        of these round trips are specific to the second factor type. If a client
        receives a PA-SPAKE PA-DATA element containing EncryptedData from the
        KDC, it MUST reply with a subsequent AS-REQ with a PA-SPAKE PA-DATA
        element containing EncryptedData, or abort the AS exchange.</t>

        <t>The key for client-originated EncryptedData messages in subsequent
        passes is K'[3] as specified in <xref target="keyderiv"/> for the
        first subsequent pass, K'[5] for the second, and so on. The key for
        KDC-originated EncryptedData messages is K'[4] for the first
        subsequent pass, K'[6] for the second, and so on.</t>
      </section>

      <section title="Reply Key Strengthening">
        <t>When the KDC has successfully validated both factors, the reply key
        is strengthened and the mechanism is complete. To strengthen the reply
        key, the client and KDC replace it with K'[0] as specified in <xref
        target="keyderiv"/>. The KDC then replies with a KDC-REP message, or
        continues on to the next mechanism in the authentication set. There is
        no final PA-SPAKE PA-DATA message from the KDC to the client.</t>
        <t>Reply key strengthening occurs only once at the end of the
        exchange. The client and KDC MUST use the initial reply key as the
        base key for all K'[n] derivations.</t>
      </section>

      <section title="Optimizations" anchor="optimizations">
        <t>The full protocol has two possible optimizations.</t>

        <t>First, the KDC MAY reply to the initial AS-REQ (containing no
        pre-authentication data) with KDC_ERR_PREAUTH_REQUIRED and a PA-SPAKE
        PA-DATA element containing a SPAKEChallenge message. In this case, the
        KDC optimistically selects a group which the client may not support. If
        the group chosen by the SPAKEChallenge message is supported by the
        client, the client MUST skip to the third pass by issuing an AS-REQ with
        a SPAKEResponse message. If the KDC's chosen group is not supported by
        the client, the client MUST continue to the Second Pass as if it had
        received an empty PA-SPAKE.  Clients MUST support this optimization.</t>

        <t>Second, clients MAY skip the first pass and send an AS-REQ with a
        PA-SPAKE PA-DATA element containing a SPAKESupport message. KDCs MUST
        support this optimization.</t>
      </section>
    </section>

    <section title="SPAKE Parameters and Conversions" anchor="spakeparams">
      <t>The SPAKE algorithm requires a shared secret input w to be used as a
      scalar multiplier (see <xref target="I-D.irtf-cfrg-spake2"/> section
      2). This value MUST be produced from the initial reply key as follows:
      <list style="numbers">
        <t>Determine a scalar octet string input length for the chosen group.
        For SEC 2 curves over a prime field F(p), this is ceil(log2(p)/8).  For
        other groups, this length is specified by the group.</t>
        <t>Produce an octet string of the above length with PRF+(K,
        "SPAKEsecret"), where K is the initial reply key and PRF+ is defined
        in <xref target="RFC6113"/> section 5.1.</t>
        <t>If the chosen group is secp521r1, set the high seven bits of the
        first byte to 0 so that there are at most 521 significant bits in the
        octet string.</t>
        <t>For SEC 2 curves, decode the octet string as a big-endian integer as
        specified in <xref target="SEC1"/> section 2.3.8.  For other groups,
        decode the octet string as specified by the group.</t>
      </list></t>
      <t>The KDC chooses a secret scalar value x and the client chooses a
      secret scalar value y. As required by the SPAKE algorithm, these values
      are chosen randomly and uniformly. The KDC and client MAY reuse x or y
      values across multiple pre-authentication operations using the same
      group.</t>
      <t>The SPAKE algorithm requires constants M and N for each
      group.  These constants MUST be taken from <xref
      target="I-D.irtf-cfrg-spake2"/> section 3 or computed using the
      method described therein.</t>
      <t>Group elements are converted to octet strings for the SPAKEChallenge
      and SPAKEResponse pubkey fields and for key derivation. For SEC 2 curves,
      group elements are represented as specified in <xref target="SEC1"/>
      section 2.3.3 with point compression on. For other groups, the
      representation is specified by the group.</t>
    </section>

    <section title="Transcript Checksum" anchor="tcksum">
      <t>The transcript checksum is an octet string of length equal to the
      output length of the required checksum type of the encryption type of
      the initial reply key (see <xref target="RFC3961"/> section 3). It
      initially contains all zero values.</t>

      <t>When the transcript checksum is updated with an octet string
      input, the new value is the checksum (as defined by the <xref
      target="RFC3961"/> section 4 get-mic operation) computed over
      the concatenation of the old value and the input.  The checksum
      is computed using the initial reply key, the required checksum type for
      that key's encryption type, and the key usage number
      KEY_USAGE_SPAKE_TRANSCRIPT.</t>

      <t>In the normal message flow or with the second optimization described
      in <xref target="optimizations"/>, the transcript checksum is first
      updated with the client's SPAKESupport message, then the KDC's
      SPAKEChallenge message, and finally with the client's pubkey value. It
      therefore incorporates the client's supported groups, the KDC's chosen
      group, the KDC's initial second-factor messages, and the client and KDC
      public values.</t>

      <t>If the first optimization described in <xref target="optimizations"/>
      is used successfully, the transcript checksum is updated only with the
      KDC's SPAKEChallenge message and the client's pubkey value.</t>

      <t>If first optimization is used unsuccessfully (i.e. the client does
      not accept the KDC's selected group), the transcript checksum is updated
      with the KDC's optimistic SPAKEChallenge message, then with the client's
      SPAKESupport message, then the KDC's second SPAKEChallenge message, and
      finally with the client's pubkey value.</t>

      <figure>
        <artwork><![CDATA[
KEY_USAGE_SPAKE_TRANSCRIPT              TBD
]]></artwork>
      </figure>
    </section>

    <section title="Key Derivation" anchor="keyderiv">
      <t>Implementations MUST NOT use the SPAKE result (denoted by K in
      Section 2 of <xref target="I-D.irtf-cfrg-spake2">SPAKE</xref>) directly
      for any cryptographic operation. Instead, the SPAKE result is used to
      derive keys K'[n] as defined in this section. This method differs
      slightly from the method used to generate K' in Section 3 of <xref
      target="I-D.irtf-cfrg-spake2">SPAKE</xref>.</t>

      <t>A PRF+ input string is assembled by concatenating the following
      values:
      <list style="symbols">
        <t>The fixed string "SPAKEKey".</t>
        <t>The SPAKE result K, converted to an octet string as specified in
        <xref target="spakeparams"/>.</t>
        <t>The transcript checksum.</t>
        <t>The KDC-REQ-BODY encoding for the request being sent or responded
        to. Within a FAST channel, the inner KDC-REQ-BODY encoding MUST be
        used.</t>
        <t>The value n as a big-endian four-byte unsigned binary number.</t>
      </list>
      The derived key K'[n] has the same encryption type as the initial reply
      key, and has the value random-to-key(PRF+(initial-reply-key,
      input-string)). PRF+ is defined in <xref target="RFC6113"/> section
      5.1.</t>
    </section>

    <section title="Second Factor Types">
      <t>This document defines one second factor type:
      <list style="hanging">
        <t hangText="SF-NONE">1</t>
      </list></t>

      <t>This second factor type indicates that no second factor is used.
      Whenever a SPAKESecondFactor is used with SF-NONE, the data field MUST be
      omitted. The SF-NONE second factor always successfully validates.</t>
    </section>

    <section title="Recommended Groups">
      <t>In the interest of broad compatibility, the following groups are
      recommended for implementation:
      <list style="symbols">
        <t>P256</t>
        <t>P384</t>
        <t>P521</t>
      </list></t>

      <t>All of these groups encode their public keys in SEC1 compressed
      format.</t>
    </section>

    <section title="Security Considerations">
      <t>All of the security considerations from
      <xref target="I-D.irtf-cfrg-spake2">SPAKE</xref> apply here as well.</t>

      <t>This mechanism includes unauthenticated plaintext in the SPAKESupport
      and SPAKEChallenge messages. Beginning with the third pass, the
      integrity of this plaintext is ensured by incorporating the transcript
      checksum into the derivation of the final reply key and second factor
      encryption keys. Downgrade attacks on SPAKESupport and SPAKEChallenge
      will result in the client and KDC deriving different reply keys and
      EncryptedData keys. The KDC-REQ-BODY contents are also incorporated into
      key derivation, ensuring their integrity. The unauthenticated plaintext
      in the KDC-REP message is not protected by this mechanism.</t>

      <t>Unless FAST is used, the factors field of a SPAKEChallenge message is
      not integrity-protected until the SPAKEResponse is verified. Second
      factor types MUST account for this when specifying the semantics of the
      data field. Second factor data in the SPAKEChallenge should not be
      included in user prompts, as it could be modified by an attacker to
      contain misleading or offensive information.</t>

      <t>Subsequent factor data, including the data in the SPAKEResponse, are
      encrypted in a derivative of the shared secret K. Therefore, it is not
      possible to exploit the untrustworthiness of SPAKEChallenge to turn the
      client into an encryption or signing oracle, unless the attacker knows
      the client's long-term key.</t>

      <t>An implementation of this pre-authentication mechanism can have the
      property of indistinguishability, meaning that an attacker who guesses a
      long-term key and a second factor value cannot determine whether one of
      the factors was correct unless both are correct. Indistinguishability is
      only maintained if the second factor can be validated solely based on the
      data in the SPAKEResponse; the use of additional round trips will reveal
      to the attacker whether the long-term key is correct.
      Indistinguishability also requires that there are no side channels. When
      processing a SPAKEResponse message, whether or not the KDC successfully
      decrypts the factor field, it must reply with the same error fields, take
      the same amount of time, and make the same observable communications to
      other servers.</t>

      <t>Given that each EncryptedData will begin a new encryption context,
      a failure to properly derive the encryption keys will result in a
      situation where the risk of compromise is non-negligible.</t>

      <t>Weak checksums present a risk to the transcript hash. Any etype with
      a checksum based on one of the following algorithms MUST NOT be used:
      <list style="symbols">
        <t>CRC32</t>
        <t>MD4</t>
        <t>MD5</t>
      </list></t>

      <t>Both the size of the EncryptedData and the number of EncryptedData
      messages may reveal information about the second factor used in an
      authentication. Care should be taken to keep second factor messages as
      small and as few as possible.</t>

      <t>A stateless KDC implementation generally must use a PA-FX-COOKIE
      value to remember its private scalar value x and the transcript
      checksum. The KDC MUST maintain confidentiality and integrity of the
      cookie value, perhaps by encrypting it in a key known only to the
      realm's KDCs. Cookie values may be replayed by attackers. The KDC SHOULD
      limit the time window of replays using a timestamp, and SHOULD prevent
      cookie values from being applied to other pre-authentication mechanisms
      or other client principals. Within the validity period of a cookie, an
      attacker can replay the final message of a pre-authentication exchange
      to any of the realm's KDCs and make it appear that the client has
      authenticated.</t>

      <t>Any side channels in the creation of the shared secret input w, or in
      the multiplications wM and wN, could allow an attacker to recover the
      client long-term key. Implementations MUST take care to avoid side
      channels, particularly timing channels. Generation of the secret scalar
      values x and y need not take constant time, but the amount of time taken
      MUST NOT provide information about the resulting value.</t>

      <t>This pre-authentication mechanism is not designed to provide forward
      secrecy. Nevertheless, some measure of forward secrecy may result
      depending on implementation choices. A passive attacker who determines
      the client long-term key after the exchange generally will not be able
      to recover the ticket session key; however, an attacker who also
      determines the PA-FX-COOKIE encryption key (if the KDC uses an encrypted
      cookie) will be able to recover the ticket session key. The KDC can
      mitigate this risk by periodically rotating the cookie encryption
      key. If the KDC or client retains the x or y value for reuse, an
      attacker who recovers the x or y value and the client long-term key will
      be able to recover the ticket session key.</t>

      <t>Although this pre-authentication mechanism is designed to prevent an
      offline dictionary attack by an active attacker posing as the KDC, such
      an attacker can attempt to downgrade the client to encrypted
      timestamp. Client implementations SHOULD provide a configuration option
      to disable encrypted timestamp on a per-realm basis to mitigate this
      attack.</t>

      <t>Like any other pre-authentication mechanism using the client
      long-term key, this pre-authentication mechanism does not prevent online
      password guessing attacks. The KDC is made aware of unsuccessful
      guesses, and can apply facilities such as password lockout to mitigate
      the risk of online attacks.</t>

      <t>Elliptic curve group operations are more computationally expensive
      than secret-key operations. As a result, the use of this mechanism may
      affect the KDC's performance under normal load and its resistance to
      denial of service attacks.</t>

      <t>The selected group's resistance to offline brute-force attacks may
      not correspond to the brute-force resistance of the secret key
      encryption type. For performance reasons, a KDC MAY select a group whose
      brute-force resistance is weaker than the secret key. A passive attacker
      who solves the group discrete logarithm problem after the exchange will
      be able to conduct an offline attack against the client long-term
      key. Although the use of password policies and costly, salted
      string-to-key functions may increase the cost of such an attack, the
      resulting cost will likely not be higher than the cost of solving the
      group discrete logarithm.</t>

      <t>This mechanism does not directly provide the KDC Authentication
      facility (<xref target="RFC6113"/> section 3.4) because it does not send
      a key confirmation from the KDC to the client. When used as a
      stand-alone mechanism, the traditional KDC authentication provided by
      the KDC-REP enc-part still applies.</t>
    </section>

    <section title="Assigned Constants">
      <t>The following key usage values are assigned for this mechanism:</t>
        <figure>
          <artwork><![CDATA[
KEY_USAGE_SPAKE_TRANSCRIPT              TBD
KEY_USAGE_SPAKE_FACTOR                  TBD
]]></artwork>
        </figure>
    </section>

    <section title="IANA Considerations">
      <t>One registry for numeric values has been created: Kerberos
      Second Factor Type Numbers.  These are signed values ranging from
      -2147483648 to 2147483647.  Positive values should be assigned only
      for algorithms specified in accordance with this specification for
      use with Kerberos or related protocols. Negative values are for
      private use; local and experimental algorithms should use these
      values.  Zero is reserved and may not be assigned.</t>
    </section>
  </middle>

  <back>
<?rfc rfcedstyle="no"?>
    <references title="Normative References">
      &rfc2119;
      &rfc3961;
      &rfc4120;
      &rfc6113;
      &spake;
      <reference anchor='SEC1'>
        <front>
          <title>SEC 1: Elliptic Curve Cryptography</title>
          <author><organization>Standards for Efficient Cryptography
          Group</organization></author>
          <date month="May" year="2009" />
        </front>
      </reference>
      <reference anchor='SEC2'>
        <front>
          <title>SEC 2: Recommended Elliptic Curve Domain Parameters</title>
          <author><organization>Standards for Efficient Cryptography
          Group</organization></author>
          <date month="January" year="2010" />
        </front>
      </reference>
    </references>
    <references title='Non-normative References'>
      &rfc6560;
    </references>
<?rfc rfcedstyle="yes"?>

    <section title="ASN.1 Module">
      <figure>
        <artwork><![CDATA[
KerberosV5SPAKE {
        iso(1) identified-organization(3) dod(6) internet(1)
        security(5) kerberosV5(2) modules(4) spake(8)
} DEFINITIONS EXPLICIT TAGS ::= BEGIN

IMPORTS
    EncryptedData, Int32
      FROM KerberosV5Spec2 { iso(1) identified-organization(3)
        dod(6) internet(1) security(5) kerberosV5(2) modules(4)
        krb5spec2(2) };
        -- as defined in RFC 4120.

SPAKESupport ::= SEQUENCE {
    groups      [0] SEQUENCE (SIZE(1..MAX)) OF OBJECT IDENTIFIER,
    ...
}

SPAKEChallenge ::= SEQUENCE {
    group       [0] OBJECT IDENTIFIER,
    pubkey      [1] OCTET STRING,
    factors     [2] SEQUENCE (SIZE(1..MAX)) OF SPAKESecondFactor,
    ...
}

SPAKESecondFactor ::= SEQUENCE {
    type        [0] Int32,
    data        [1] OCTET STRING OPTIONAL
}

SPAKEResponse ::= SEQUENCE {
    pubkey      [0] OCTET STRING,
    factor      [1] EncryptedData, -- SPAKESecondFactor
    ...
}

END
]]></artwork>
      </figure>
    </section>

    <section title="Acknowledgements">
      <figure>
        <artwork><![CDATA[
  Nico Williams (Cryptonector)
  Tom Yu (MIT)
  ]]></artwork>
      </figure>
    </section>
  </back>
</rfc>

